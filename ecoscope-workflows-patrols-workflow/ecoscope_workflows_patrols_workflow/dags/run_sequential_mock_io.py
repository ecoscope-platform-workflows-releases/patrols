# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details

# ruff: noqa: E402

"""WARNING: This file is generated in a testing context and should not be used in production.
Lines specific to the testing context are marked with a test tube emoji (ðŸ§ª) to indicate
that they would not be included (or would be different) in the production version of this file.
"""

import json
import os
import warnings  # ðŸ§ª

from ecoscope_workflows_core.tasks.config import set_workflow_details
from ecoscope_workflows_core.tasks.filter import (
    get_timezone_from_time_range,
    set_time_range,
)
from ecoscope_workflows_core.tasks.io import set_er_connection
from ecoscope_workflows_core.tasks.skip import any_dependency_skipped, any_is_empty_df
from ecoscope_workflows_core.testing import create_task_magicmock  # ðŸ§ª
from ecoscope_workflows_ext_ecoscope.tasks.io import (
    set_patrols_and_patrol_events_params,
)

get_patrols_from_combined_params = create_task_magicmock(  # ðŸ§ª
    anchor="ecoscope_workflows_ext_ecoscope.tasks.io",  # ðŸ§ª
    func_name="get_patrols_from_combined_params",  # ðŸ§ª
)  # ðŸ§ª
from ecoscope_workflows_core.tasks.skip import any_dependency_skipped, any_is_empty_df

get_patrol_observations_from_patrols_df_and_combined_params = (
    create_task_magicmock(  # ðŸ§ª
        anchor="ecoscope_workflows_ext_ecoscope.tasks.io",  # ðŸ§ª
        func_name="get_patrol_observations_from_patrols_df_and_combined_params",  # ðŸ§ª
    )
)  # ðŸ§ª
from ecoscope_workflows_core.tasks.analysis import (
    dataframe_column_max,
    dataframe_column_mean,
    dataframe_column_nunique,
    dataframe_column_sum,
)
from ecoscope_workflows_core.tasks.config import set_string_var
from ecoscope_workflows_core.tasks.groupby import groupbykey, set_groupers, split_groups
from ecoscope_workflows_core.tasks.io import persist_text
from ecoscope_workflows_core.tasks.results import (
    create_map_widget_single_view,
    create_plot_widget_single_view,
    create_single_value_widget_single_view,
    gather_dashboard,
    merge_widget_views,
)
from ecoscope_workflows_core.tasks.skip import (
    all_keyed_iterables_are_skips,
    any_dependency_skipped,
    any_is_empty_df,
    never,
)
from ecoscope_workflows_core.tasks.transformation import (
    add_temporal_index,
    convert_column_values_to_string,
    convert_values_to_timezone,
    map_columns,
    map_values_with_unit,
    sort_values,
    with_unit,
)
from ecoscope_workflows_ext_ecoscope.tasks.analysis import (
    calculate_linear_time_density,
    create_meshgrid,
)
from ecoscope_workflows_ext_ecoscope.tasks.io import (
    unpack_events_from_patrols_df_and_combined_params,
)
from ecoscope_workflows_ext_ecoscope.tasks.preprocessing import (
    process_relocations,
    relocations_to_trajectory,
)
from ecoscope_workflows_ext_ecoscope.tasks.results import (
    create_point_layer,
    create_polygon_layer,
    create_polyline_layer,
    draw_ecomap,
    draw_pie_chart,
    draw_time_series_bar_chart,
    set_base_maps,
)
from ecoscope_workflows_ext_ecoscope.tasks.skip import all_geometry_are_none
from ecoscope_workflows_ext_ecoscope.tasks.transformation import (
    apply_color_map,
    apply_reloc_coord_filter,
    drop_nan_values_by_column,
)

from ..params import Params


def main(params: Params):
    warnings.warn("This test script should not be used in production!")  # ðŸ§ª

    params_dict = json.loads(params.model_dump_json(exclude_unset=True))

    workflow_details = (
        set_workflow_details.validate()
        .handle_errors(task_instance_id="workflow_details")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(**(params_dict.get("workflow_details") or {}))
        .call()
    )

    er_client_name = (
        set_er_connection.validate()
        .handle_errors(task_instance_id="er_client_name")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(**(params_dict.get("er_client_name") or {}))
        .call()
    )

    time_range = (
        set_time_range.validate()
        .handle_errors(task_instance_id="time_range")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            time_format="%d %b %Y %H:%M:%S", **(params_dict.get("time_range") or {})
        )
        .call()
    )

    get_timezone = (
        get_timezone_from_time_range.validate()
        .handle_errors(task_instance_id="get_timezone")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(time_range=time_range, **(params_dict.get("get_timezone") or {}))
        .call()
    )

    er_patrol_and_events_params = (
        set_patrols_and_patrol_events_params.validate()
        .handle_errors(task_instance_id="er_patrol_and_events_params")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            client=er_client_name,
            time_range=time_range,
            include_patrol_details=True,
            raise_on_empty=False,
            truncate_to_time_range=True,
            sub_page_size=100,
            **(params_dict.get("er_patrol_and_events_params") or {}),
        )
        .call()
    )

    prefetch_patrols = (
        get_patrols_from_combined_params.validate()
        .handle_errors(task_instance_id="prefetch_patrols")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            combined_params=er_patrol_and_events_params,
            **(params_dict.get("prefetch_patrols") or {}),
        )
        .call()
    )

    patrol_obs = (
        get_patrol_observations_from_patrols_df_and_combined_params.validate()
        .handle_errors(task_instance_id="patrol_obs")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            patrols_df=prefetch_patrols,
            combined_params=er_patrol_and_events_params,
            **(params_dict.get("patrol_obs") or {}),
        )
        .call()
    )

    patrol_events = (
        unpack_events_from_patrols_df_and_combined_params.validate()
        .handle_errors(task_instance_id="patrol_events")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            patrols_df=prefetch_patrols,
            combined_params=er_patrol_and_events_params,
            **(params_dict.get("patrol_events") or {}),
        )
        .call()
    )

    convert_patrols_to_user_timezone = (
        convert_values_to_timezone.validate()
        .handle_errors(task_instance_id="convert_patrols_to_user_timezone")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=patrol_obs,
            timezone=get_timezone,
            columns=["patrol_start_time", "patrol_end_time", "fixtime"],
            **(params_dict.get("convert_patrols_to_user_timezone") or {}),
        )
        .call()
    )

    convert_events_to_user_timezone = (
        convert_values_to_timezone.validate()
        .handle_errors(task_instance_id="convert_events_to_user_timezone")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=patrol_events,
            timezone=get_timezone,
            columns=["time"],
            **(params_dict.get("convert_events_to_user_timezone") or {}),
        )
        .call()
    )

    groupers = (
        set_groupers.validate()
        .handle_errors(task_instance_id="groupers")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(**(params_dict.get("groupers") or {}))
        .call()
    )

    set_patrol_traj_color_column = (
        set_string_var.validate()
        .handle_errors(task_instance_id="set_patrol_traj_color_column")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(**(params_dict.get("set_patrol_traj_color_column") or {}))
        .call()
    )

    patrol_reloc = (
        process_relocations.validate()
        .handle_errors(task_instance_id="patrol_reloc")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            observations=convert_patrols_to_user_timezone,
            relocs_columns=[
                "patrol_id",
                "patrol_start_time",
                "patrol_end_time",
                "patrol_type__value",
                "patrol_type__display",
                "patrol_serial_number",
                "patrol_status",
                "patrol_subject",
                "groupby_col",
                "fixtime",
                "junk_status",
                "extra__source",
                "geometry",
            ],
            filter_point_coords=[
                {"x": 180.0, "y": 90.0},
                {"x": 0.0, "y": 0.0},
                {"x": 1.0, "y": 1.0},
            ],
            **(params_dict.get("patrol_reloc") or {}),
        )
        .call()
    )

    patrol_traj = (
        relocations_to_trajectory.validate()
        .handle_errors(task_instance_id="patrol_traj")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(relocations=patrol_reloc, **(params_dict.get("patrol_traj") or {}))
        .call()
    )

    traj_add_temporal_index = (
        add_temporal_index.validate()
        .handle_errors(task_instance_id="traj_add_temporal_index")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=patrol_traj,
            time_col="extra__patrol_start_time",
            groupers=groupers,
            cast_to_datetime=True,
            format="mixed",
            **(params_dict.get("traj_add_temporal_index") or {}),
        )
        .call()
    )

    traj_rename_grouper_columns = (
        map_columns.validate()
        .handle_errors(task_instance_id="traj_rename_grouper_columns")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=traj_add_temporal_index,
            drop_columns=[],
            retain_columns=[],
            rename_columns={
                "extra__patrol_type__value": "patrol_type",
                "extra__patrol_serial_number": "patrol_serial_number",
                "extra__patrol_status": "patrol_status",
                "extra__patrol_subject": "patrol_subject",
            },
            **(params_dict.get("traj_rename_grouper_columns") or {}),
        )
        .call()
    )

    traj_colormap = (
        apply_color_map.validate()
        .handle_errors(task_instance_id="traj_colormap")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=traj_rename_grouper_columns,
            colormap=[
                "#FF9600",
                "#F23B0E",
                "#A100CB",
                "#F04564",
                "#03421A",
                "#3089FF",
                "#E26FFF",
                "#8C1700",
                "#002960",
                "#FFD000",
                "#B62879",
                "#680078",
                "#005A56",
                "#0056C7",
                "#331878",
                "#E76826",
            ],
            input_column_name=set_patrol_traj_color_column,
            output_column_name="patrol_traj_colormap",
            **(params_dict.get("traj_colormap") or {}),
        )
        .call()
    )

    filter_patrol_events = (
        apply_reloc_coord_filter.validate()
        .handle_errors(task_instance_id="filter_patrol_events")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=convert_events_to_user_timezone,
            roi_gdf=None,
            roi_name=None,
            **(params_dict.get("filter_patrol_events") or {}),
        )
        .call()
    )

    pe_add_temporal_index = (
        add_temporal_index.validate()
        .handle_errors(task_instance_id="pe_add_temporal_index")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=filter_patrol_events,
            time_col="patrol_start_time",
            groupers=groupers,
            cast_to_datetime=True,
            format="mixed",
            **(params_dict.get("pe_add_temporal_index") or {}),
        )
        .call()
    )

    pe_colormap = (
        apply_color_map.validate()
        .handle_errors(task_instance_id="pe_colormap")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=pe_add_temporal_index,
            input_column_name="event_type",
            colormap="tab20b",
            output_column_name="event_type_colormap",
            **(params_dict.get("pe_colormap") or {}),
        )
        .call()
    )

    patrol_traj_cols_to_string = (
        convert_column_values_to_string.validate()
        .handle_errors(task_instance_id="patrol_traj_cols_to_string")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=traj_colormap,
            columns=["patrol_serial_number", "patrol_type"],
            **(params_dict.get("patrol_traj_cols_to_string") or {}),
        )
        .call()
    )

    pe_cols_to_string = (
        convert_column_values_to_string.validate()
        .handle_errors(task_instance_id="pe_cols_to_string")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=pe_colormap,
            columns=["patrol_serial_number", "patrol_type"],
            **(params_dict.get("pe_cols_to_string") or {}),
        )
        .call()
    )

    set_traj_pe_map_title = (
        set_string_var.validate()
        .handle_errors(task_instance_id="set_traj_pe_map_title")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            var="Trajectories & Patrol Events Map",
            **(params_dict.get("set_traj_pe_map_title") or {}),
        )
        .call()
    )

    set_ltd_map_title = (
        set_string_var.validate()
        .handle_errors(task_instance_id="set_ltd_map_title")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(var="Time Density Map", **(params_dict.get("set_ltd_map_title") or {}))
        .call()
    )

    set_bar_chart_title = (
        set_string_var.validate()
        .handle_errors(task_instance_id="set_bar_chart_title")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            var="Patrol Events Bar Chart",
            **(params_dict.get("set_bar_chart_title") or {}),
        )
        .call()
    )

    set_pie_chart_title = (
        set_string_var.validate()
        .handle_errors(task_instance_id="set_pie_chart_title")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            var="Patrol Events Pie Chart",
            **(params_dict.get("set_pie_chart_title") or {}),
        )
        .call()
    )

    split_patrol_traj_groups = (
        split_groups.validate()
        .handle_errors(task_instance_id="split_patrol_traj_groups")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=patrol_traj_cols_to_string,
            groupers=groupers,
            **(params_dict.get("split_patrol_traj_groups") or {}),
        )
        .call()
    )

    split_pe_groups = (
        split_groups.validate()
        .handle_errors(task_instance_id="split_pe_groups")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            df=pe_cols_to_string,
            groupers=groupers,
            **(params_dict.get("split_pe_groups") or {}),
        )
        .call()
    )

    base_map_defs = (
        set_base_maps.validate()
        .handle_errors(task_instance_id="base_map_defs")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(**(params_dict.get("base_map_defs") or {}))
        .call()
    )

    pe_rename_display_columns = (
        map_columns.validate()
        .handle_errors(task_instance_id="pe_rename_display_columns")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            drop_columns=[],
            retain_columns=[],
            rename_columns={
                "patrol_serial_number": "Patrol Serial",
                "serial_number": "Event Serial",
                "event_type": "Event Type",
                "time": "Event Time",
            },
            **(params_dict.get("pe_rename_display_columns") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=split_pe_groups)
    )

    patrol_events_map_layers = (
        create_point_layer.validate()
        .handle_errors(task_instance_id="patrol_events_map_layers")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
                all_geometry_are_none,
            ],
            unpack_depth=1,
        )
        .partial(
            layer_style={"fill_color_column": "event_type_colormap"},
            legend=None,
            tooltip_columns=[
                "Patrol Serial",
                "Event Serial",
                "Event Type",
                "Event Time",
            ],
            **(params_dict.get("patrol_events_map_layers") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=pe_rename_display_columns)
    )

    speed_val_with_unit = (
        map_values_with_unit.validate()
        .handle_errors(task_instance_id="speed_val_with_unit")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            input_column_name="speed_kmhr",
            output_column_name="speed_kmhr",
            original_unit="km/h",
            new_unit="km/h",
            decimal_places=1,
            **(params_dict.get("speed_val_with_unit") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=split_patrol_traj_groups)
    )

    patrol_traj_rename_columns = (
        map_columns.validate()
        .handle_errors(task_instance_id="patrol_traj_rename_columns")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            drop_columns=[],
            retain_columns=[],
            rename_columns={
                "patrol_serial_number": "Patrol Serial",
                "extra__patrol_type__display": "Patrol Type",
                "segment_start": "Start",
                "timespan_seconds": "Duration (s)",
                "speed_kmhr": "Speed (kph)",
            },
            **(params_dict.get("patrol_traj_rename_columns") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=speed_val_with_unit)
    )

    patrol_traj_map_layers = (
        create_polyline_layer.validate()
        .handle_errors(task_instance_id="patrol_traj_map_layers")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
                all_geometry_are_none,
            ],
            unpack_depth=1,
        )
        .partial(
            layer_style={
                "auto_highlight": False,
                "opacity": 1.0,
                "pickable": True,
                "get_color": None,
                "get_width": 3.0,
                "color_column": "patrol_traj_colormap",
                "width_units": "pixels",
                "cap_rounded": True,
            },
            legend={
                "label_column": set_patrol_traj_color_column,
                "color_column": "patrol_traj_colormap",
            },
            tooltip_columns=[
                "Patrol Serial",
                "Patrol Type",
                "Start",
                "Duration (s)",
                "Speed (kph)",
            ],
            **(params_dict.get("patrol_traj_map_layers") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=patrol_traj_rename_columns)
    )

    combined_traj_and_pe_map_layers = (
        groupbykey.validate()
        .handle_errors(task_instance_id="combined_traj_and_pe_map_layers")
        .skipif(
            conditions=[
                all_keyed_iterables_are_skips,
            ],
            unpack_depth=1,
        )
        .partial(
            iterables=[patrol_traj_map_layers, patrol_events_map_layers],
            **(params_dict.get("combined_traj_and_pe_map_layers") or {}),
        )
        .call()
    )

    traj_patrol_events_ecomap = (
        draw_ecomap.validate()
        .handle_errors(task_instance_id="traj_patrol_events_ecomap")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            tile_layers=base_map_defs,
            north_arrow_style={"placement": "top-left"},
            legend_style={
                "title": set_patrol_traj_color_column,
                "format_title": True,
                "placement": "bottom-right",
            },
            static=False,
            title=None,
            max_zoom=20,
            widget_id=set_traj_pe_map_title,
            **(params_dict.get("traj_patrol_events_ecomap") or {}),
        )
        .mapvalues(argnames=["geo_layers"], argvalues=combined_traj_and_pe_map_layers)
    )

    traj_pe_ecomap_html_urls = (
        persist_text.validate()
        .handle_errors(task_instance_id="traj_pe_ecomap_html_urls")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            filename_suffix="v2",
            **(params_dict.get("traj_pe_ecomap_html_urls") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=traj_patrol_events_ecomap)
    )

    traj_pe_map_widgets_single_views = (
        create_map_widget_single_view.validate()
        .handle_errors(task_instance_id="traj_pe_map_widgets_single_views")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title=set_traj_pe_map_title,
            **(params_dict.get("traj_pe_map_widgets_single_views") or {}),
        )
        .map(argnames=["view", "data"], argvalues=traj_pe_ecomap_html_urls)
    )

    traj_pe_grouped_map_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="traj_pe_grouped_map_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=traj_pe_map_widgets_single_views,
            **(params_dict.get("traj_pe_grouped_map_widget") or {}),
        )
        .call()
    )

    total_patrols = (
        dataframe_column_nunique.validate()
        .handle_errors(task_instance_id="total_patrols")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            column_name="extra__patrol_id", **(params_dict.get("total_patrols") or {})
        )
        .mapvalues(argnames=["df"], argvalues=split_patrol_traj_groups)
    )

    total_patrols_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .handle_errors(task_instance_id="total_patrols_sv_widgets")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title="Total Patrols",
            decimal_places=1,
            **(params_dict.get("total_patrols_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=total_patrols)
    )

    total_patrols_grouped_sv_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="total_patrols_grouped_sv_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=total_patrols_sv_widgets,
            **(params_dict.get("total_patrols_grouped_sv_widget") or {}),
        )
        .call()
    )

    total_patrol_time = (
        dataframe_column_sum.validate()
        .handle_errors(task_instance_id="total_patrol_time")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            column_name="timespan_seconds",
            **(params_dict.get("total_patrol_time") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=split_patrol_traj_groups)
    )

    total_patrol_time_converted = (
        with_unit.validate()
        .handle_errors(task_instance_id="total_patrol_time_converted")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            original_unit="s",
            new_unit="h",
            **(params_dict.get("total_patrol_time_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=total_patrol_time)
    )

    total_patrol_time_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .handle_errors(task_instance_id="total_patrol_time_sv_widgets")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title="Total Time",
            decimal_places=1,
            **(params_dict.get("total_patrol_time_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=total_patrol_time_converted)
    )

    patrol_time_grouped_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="patrol_time_grouped_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=total_patrol_time_sv_widgets,
            **(params_dict.get("patrol_time_grouped_widget") or {}),
        )
        .call()
    )

    total_patrol_dist = (
        dataframe_column_sum.validate()
        .handle_errors(task_instance_id="total_patrol_dist")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            column_name="dist_meters", **(params_dict.get("total_patrol_dist") or {})
        )
        .mapvalues(argnames=["df"], argvalues=split_patrol_traj_groups)
    )

    total_patrol_dist_converted = (
        with_unit.validate()
        .handle_errors(task_instance_id="total_patrol_dist_converted")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            original_unit="m",
            new_unit="km",
            **(params_dict.get("total_patrol_dist_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=total_patrol_dist)
    )

    total_patrol_dist_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .handle_errors(task_instance_id="total_patrol_dist_sv_widgets")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title="Total Distance",
            decimal_places=1,
            **(params_dict.get("total_patrol_dist_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=total_patrol_dist_converted)
    )

    patrol_dist_grouped_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="patrol_dist_grouped_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=total_patrol_dist_sv_widgets,
            **(params_dict.get("patrol_dist_grouped_widget") or {}),
        )
        .call()
    )

    avg_speed = (
        dataframe_column_mean.validate()
        .handle_errors(task_instance_id="avg_speed")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(column_name="speed_kmhr", **(params_dict.get("avg_speed") or {}))
        .mapvalues(argnames=["df"], argvalues=split_patrol_traj_groups)
    )

    average_speed_converted = (
        with_unit.validate()
        .handle_errors(task_instance_id="average_speed_converted")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            original_unit="km/h",
            new_unit="km/h",
            **(params_dict.get("average_speed_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=avg_speed)
    )

    avg_speed_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .handle_errors(task_instance_id="avg_speed_sv_widgets")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title="Average Speed",
            decimal_places=1,
            **(params_dict.get("avg_speed_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=average_speed_converted)
    )

    avg_speed_grouped_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="avg_speed_grouped_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=avg_speed_sv_widgets,
            **(params_dict.get("avg_speed_grouped_widget") or {}),
        )
        .call()
    )

    max_speed = (
        dataframe_column_max.validate()
        .handle_errors(task_instance_id="max_speed")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(column_name="speed_kmhr", **(params_dict.get("max_speed") or {}))
        .mapvalues(argnames=["df"], argvalues=split_patrol_traj_groups)
    )

    max_speed_converted = (
        with_unit.validate()
        .handle_errors(task_instance_id="max_speed_converted")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            original_unit="km/h",
            new_unit="km/h",
            **(params_dict.get("max_speed_converted") or {}),
        )
        .mapvalues(argnames=["value"], argvalues=max_speed)
    )

    max_speed_sv_widgets = (
        create_single_value_widget_single_view.validate()
        .handle_errors(task_instance_id="max_speed_sv_widgets")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title="Max Speed",
            decimal_places=1,
            **(params_dict.get("max_speed_sv_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=max_speed_converted)
    )

    max_speed_grouped_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="max_speed_grouped_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=max_speed_sv_widgets,
            **(params_dict.get("max_speed_grouped_widget") or {}),
        )
        .call()
    )

    patrol_events_bar_chart = (
        draw_time_series_bar_chart.validate()
        .handle_errors(task_instance_id="patrol_events_bar_chart")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            x_axis="time",
            y_axis="event_type",
            category="event_type",
            agg_function="count",
            color_column="event_type_colormap",
            plot_style={"xperiodalignment": "middle"},
            layout_style=None,
            widget_id=set_bar_chart_title,
            **(params_dict.get("patrol_events_bar_chart") or {}),
        )
        .mapvalues(argnames=["dataframe"], argvalues=split_pe_groups)
    )

    patrol_events_bar_chart_html_url = (
        persist_text.validate()
        .handle_errors(task_instance_id="patrol_events_bar_chart_html_url")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            filename_suffix="v2",
            **(params_dict.get("patrol_events_bar_chart_html_url") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=patrol_events_bar_chart)
    )

    patrol_events_bar_chart_widget = (
        create_plot_widget_single_view.validate()
        .handle_errors(task_instance_id="patrol_events_bar_chart_widget")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title=set_bar_chart_title,
            **(params_dict.get("patrol_events_bar_chart_widget") or {}),
        )
        .map(argnames=["view", "data"], argvalues=patrol_events_bar_chart_html_url)
    )

    grouped_bar_plot_widget_merge = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="grouped_bar_plot_widget_merge")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=patrol_events_bar_chart_widget,
            **(params_dict.get("grouped_bar_plot_widget_merge") or {}),
        )
        .call()
    )

    patrol_events_pie_chart = (
        draw_pie_chart.validate()
        .handle_errors(task_instance_id="patrol_events_pie_chart")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            value_column="event_type",
            plot_style={"textinfo": "value"},
            label_column=None,
            color_column="event_type_colormap",
            layout_style=None,
            widget_id=set_pie_chart_title,
            **(params_dict.get("patrol_events_pie_chart") or {}),
        )
        .mapvalues(argnames=["dataframe"], argvalues=split_pe_groups)
    )

    pe_pie_chart_html_urls = (
        persist_text.validate()
        .handle_errors(task_instance_id="pe_pie_chart_html_urls")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            filename_suffix="v2",
            **(params_dict.get("pe_pie_chart_html_urls") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=patrol_events_pie_chart)
    )

    patrol_events_pie_chart_widgets = (
        create_plot_widget_single_view.validate()
        .handle_errors(task_instance_id="patrol_events_pie_chart_widgets")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(
            title=set_pie_chart_title,
            **(params_dict.get("patrol_events_pie_chart_widgets") or {}),
        )
        .map(argnames=["view", "data"], argvalues=pe_pie_chart_html_urls)
    )

    patrol_events_pie_widget_grouped = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="patrol_events_pie_widget_grouped")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=patrol_events_pie_chart_widgets,
            **(params_dict.get("patrol_events_pie_widget_grouped") or {}),
        )
        .call()
    )

    ltd_meshgrid = (
        create_meshgrid.validate()
        .handle_errors(task_instance_id="ltd_meshgrid")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            aoi=patrol_traj_cols_to_string,
            intersecting_only=False,
            **(params_dict.get("ltd_meshgrid") or {}),
        )
        .call()
    )

    ltd = (
        calculate_linear_time_density.validate()
        .handle_errors(task_instance_id="ltd")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            meshgrid=ltd_meshgrid,
            percentiles=[50.0, 60.0, 70.0, 80.0, 90.0, 100.0],
            **(params_dict.get("ltd") or {}),
        )
        .mapvalues(argnames=["trajectory_gdf"], argvalues=split_patrol_traj_groups)
    )

    drop_nan_percentiles = (
        drop_nan_values_by_column.validate()
        .handle_errors(task_instance_id="drop_nan_percentiles")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            column_name="percentile", **(params_dict.get("drop_nan_percentiles") or {})
        )
        .mapvalues(argnames=["df"], argvalues=ltd)
    )

    sort_percentile_values = (
        sort_values.validate()
        .handle_errors(task_instance_id="sort_percentile_values")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            column_name="percentile",
            ascending=True,
            na_position="last",
            **(params_dict.get("sort_percentile_values") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=drop_nan_percentiles)
    )

    percentile_col_to_string = (
        convert_column_values_to_string.validate()
        .handle_errors(task_instance_id="percentile_col_to_string")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            columns=["percentile"],
            **(params_dict.get("percentile_col_to_string") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=sort_percentile_values)
    )

    td_colormap = (
        apply_color_map.validate()
        .handle_errors(task_instance_id="td_colormap")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            input_column_name="percentile",
            colormap="RdYlGn",
            output_column_name="percentile_colormap",
            **(params_dict.get("td_colormap") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=percentile_col_to_string)
    )

    patrol_td_rename_columns = (
        map_columns.validate()
        .handle_errors(task_instance_id="patrol_td_rename_columns")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            drop_columns=[],
            retain_columns=[],
            rename_columns={"percentile": "Percentile"},
            **(params_dict.get("patrol_td_rename_columns") or {}),
        )
        .mapvalues(argnames=["df"], argvalues=td_colormap)
    )

    td_map_layer = (
        create_polygon_layer.validate()
        .handle_errors(task_instance_id="td_map_layer")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
                all_geometry_are_none,
            ],
            unpack_depth=1,
        )
        .partial(
            layer_style={
                "fill_color_column": "percentile_colormap",
                "opacity": 0.7,
                "get_line_width": 0,
            },
            legend={
                "label_column": "Percentile",
                "label_suffix": " %",
                "color_column": "percentile_colormap",
            },
            tooltip_columns=["Percentile"],
            **(params_dict.get("td_map_layer") or {}),
        )
        .mapvalues(argnames=["geodataframe"], argvalues=patrol_td_rename_columns)
    )

    td_ecomap = (
        draw_ecomap.validate()
        .handle_errors(task_instance_id="td_ecomap")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            tile_layers=base_map_defs,
            north_arrow_style={"placement": "top-left"},
            legend_style={
                "title": "Time Spent",
                "format_title": False,
                "placement": "bottom-right",
            },
            static=False,
            title=None,
            max_zoom=20,
            widget_id=set_ltd_map_title,
            **(params_dict.get("td_ecomap") or {}),
        )
        .mapvalues(argnames=["geo_layers"], argvalues=td_map_layer)
    )

    td_ecomap_html_url = (
        persist_text.validate()
        .handle_errors(task_instance_id="td_ecomap_html_url")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            root_path=os.environ["ECOSCOPE_WORKFLOWS_RESULTS"],
            filename_suffix="v2",
            **(params_dict.get("td_ecomap_html_url") or {}),
        )
        .mapvalues(argnames=["text"], argvalues=td_ecomap)
    )

    td_map_widget = (
        create_map_widget_single_view.validate()
        .handle_errors(task_instance_id="td_map_widget")
        .skipif(
            conditions=[
                never,
            ],
            unpack_depth=1,
        )
        .partial(title=set_ltd_map_title, **(params_dict.get("td_map_widget") or {}))
        .map(argnames=["view", "data"], argvalues=td_ecomap_html_url)
    )

    td_grouped_map_widget = (
        merge_widget_views.validate()
        .handle_errors(task_instance_id="td_grouped_map_widget")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            widgets=td_map_widget, **(params_dict.get("td_grouped_map_widget") or {})
        )
        .call()
    )

    patrol_dashboard = (
        gather_dashboard.validate()
        .handle_errors(task_instance_id="patrol_dashboard")
        .skipif(
            conditions=[
                any_is_empty_df,
                any_dependency_skipped,
            ],
            unpack_depth=1,
        )
        .partial(
            details=workflow_details,
            widgets=[
                traj_pe_grouped_map_widget,
                td_grouped_map_widget,
                grouped_bar_plot_widget_merge,
                patrol_events_pie_widget_grouped,
                total_patrols_grouped_sv_widget,
                patrol_time_grouped_widget,
                patrol_dist_grouped_widget,
                avg_speed_grouped_widget,
                max_speed_grouped_widget,
            ],
            groupers=groupers,
            time_range=time_range,
            **(params_dict.get("patrol_dashboard") or {}),
        )
        .call()
    )

    return patrol_dashboard
