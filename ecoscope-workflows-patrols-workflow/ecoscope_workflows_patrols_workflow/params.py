# AUTOGENERATED BY ECOSCOPE-WORKFLOWS; see fingerprint in README.md for details


from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class WorkflowDetails(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., description="The name of your workflow", title="Name")
    description: str = Field(..., description="A description", title="Description")
    image_url: Optional[str] = Field("", description="An image url", title="Image Url")


class TimeRange(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    since: AwareDatetime = Field(..., description="The start time", title="Since")
    until: AwareDatetime = Field(..., description="The end time", title="Until")


class StatusEnum(str, Enum):
    active = "active"
    overdue = "overdue"
    done = "done"
    cancelled = "cancelled"


class PatrolObs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    patrol_type: List[str] = Field(
        ..., description="list of UUID of patrol types", title="Patrol Type"
    )
    status: Optional[List[StatusEnum]] = Field(
        ["done"],
        description="list of 'scheduled'/'active'/'overdue'/'done'/'cancelled'",
        title="Status",
    )


class PatrolTraj(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    min_length_meters: Optional[float] = Field(0.001, title="Min Length Meters")
    max_length_meters: Optional[float] = Field(10000, title="Max Length Meters")
    max_time_secs: Optional[float] = Field(3600, title="Max Time Secs")
    min_time_secs: Optional[float] = Field(1, title="Min Time Secs")
    max_speed_kmhr: Optional[float] = Field(120, title="Max Speed Kmhr")
    min_speed_kmhr: Optional[float] = Field(0.0001, title="Min Speed Kmhr")


class PatrolEvents(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    patrol_type: List[str] = Field(
        ..., description="list of UUID of patrol types", title="Patrol Type"
    )
    status: Optional[List[str]] = Field(
        ["done"],
        description="list of 'scheduled'/'active'/'overdue'/'done'/'cancelled'",
        title="Status",
    )


class TimeInterval(str, Enum):
    year = "year"
    month = "month"
    week = "week"
    day = "day"
    hour = "hour"


class PatrolEventsBarChart(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    time_interval: TimeInterval = Field(
        ..., description="Sets the time interval of the x axis.", title="Time Interval"
    )


class Td(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pixel_size: Optional[float] = Field(
        250.0, description="Raster pixel size in meters.", title="Pixel Size"
    )
    max_speed_factor: Optional[float] = Field(1.05, title="Max Speed Factor")
    expansion_factor: Optional[float] = Field(1.3, title="Expansion Factor")


class EarthRangerConnection(BaseModel):
    name: str = Field(..., title="Connection Name")


class Grouper(BaseModel):
    index_name: str = Field(..., title="Index Name")


class TemporalGrouper(BaseModel):
    temporal_index: str = Field(..., title="Temporal Index")


class Coordinate(BaseModel):
    x: float = Field(..., title="X")
    y: float = Field(..., title="Y")


class ErClientName(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    data_source: EarthRangerConnection = Field(
        ...,
        description="Select one of your configured data sources by name.",
        title="Data Source",
    )


class Groupers(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    groupers: Optional[List[Union[Grouper, TemporalGrouper]]] = Field(
        None,
        description="            Temporal index(es) and/or column(s) to group by. This field is optional.\n            If left unfilled, all data will be presented together in a single group.\n            ",
        title="Groupers",
    )


class FilterPatrolEvents(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    min_x: Optional[float] = Field(-180.0, title="Min X")
    max_x: Optional[float] = Field(180.0, title="Max X")
    min_y: Optional[float] = Field(-90.0, title="Min Y")
    max_y: Optional[float] = Field(90.0, title="Max Y")
    filter_point_coords: Optional[List[Coordinate]] = Field(
        [], title="Filter Point Coords"
    )


class Params(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    workflow_details: Optional[WorkflowDetails] = Field(
        None, title="Set Workflow Details"
    )
    er_client_name: Optional[ErClientName] = Field(
        None, title="Select EarthRanger Data Source"
    )
    groupers: Optional[Groupers] = Field(None, title="Set Groupers")
    time_range: Optional[TimeRange] = Field(None, title="Set Time Range Filter")
    patrol_obs: Optional[PatrolObs] = Field(
        None, title="Get Patrol Observations from EarthRanger"
    )
    patrol_traj: Optional[PatrolTraj] = Field(
        None, title="Transform Relocations to Trajectories"
    )
    patrol_events: Optional[PatrolEvents] = Field(
        None, title="Get Patrol Events from EarthRanger"
    )
    filter_patrol_events: Optional[FilterPatrolEvents] = Field(
        None, title="Apply Relocation Coordinate Filter"
    )
    patrol_events_bar_chart: Optional[PatrolEventsBarChart] = Field(
        None, title="Draw Time Series Bar Chart for Patrols Events"
    )
    td: Optional[Td] = Field(None, title="Calculate Time Density from Trajectory")
